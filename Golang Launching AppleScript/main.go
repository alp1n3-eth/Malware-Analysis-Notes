package main

import (
	"fmt"
	"os/exec"
)

func main() {
	// promptUser()

	// networkCall()

	file2tmp()

	safariCookies()
}

func promptUser() {
	script := `
		display dialog "What is your name?" default answer ""
		set userName to text returned of result
		display dialog "Hello, " & userName & "! Nice to meet you."
	`

	cmd := exec.Command("osascript", "-e", script)
	output, err := cmd.CombinedOutput()

	if err != nil {
		fmt.Printf("Error executing AppleScript: %v\n", err)
		return
	}

	fmt.Printf("AppleScript output: %s\n", output)
}

func networkCall() {
	script := `
		try
  		set result_send to (do shell script "curl -X POST -H \"uuid: 399122bdb9844f7d934631745e22bd06\" -H \"user: test_user\" -H \"buildid: id117\" http://google.com/test")
  		end try
  	`

	cmd := exec.Command("osascript", "-e", script)
	output, err := cmd.CombinedOutput()

	if err != nil {
		fmt.Printf("Error executing AppleScript: %v\n", err)
		return
	}

	fmt.Printf("AppleScript output: %s\n", output)
}

func file2tmp() {
	script := `
	on run
	set userTmpDir to (POSIX path of (path to home folder)) & "Library/Caches/TemporaryItems/"
	set newFolderName to "ExampleFolder"
	set newFolderPath to userTmpDir & newFolderName & "/"
	
	-- Create a new folder
	do shell script "mkdir -p " & quoted form of newFolderPath
	
	-- Create an example file to copy
	set exampleFileName to "example.txt"
	set exampleFilePath to userTmpDir & exampleFileName
	do shell script "echo 'This is an example file.' > " & quoted form of exampleFilePath
	
	-- Copy the example file to the new folder
	set newFilePath to newFolderPath & exampleFileName
	do shell script "cp " & quoted form of exampleFilePath & " " & quoted form of newFilePath
	
	end run
	`

	cmd := exec.Command("osascript", "-e", script)
	output, err := cmd.CombinedOutput()

	if err != nil {
		fmt.Printf("Error executing AppleScript: %v\n", err)
		return
	}

	fmt.Printf("AppleScript output: %s\n", output)
}

func safariCookies() {
	script := `
	set destinationFolderPath to ((path to home folder as text))

	tell application "Finder"
	try
	set safariFolder to ((path to library folder from user domain as text) & "Containers:com.apple.Safari:Data:Library:Cookies:")
	try
	duplicate file "Cookies.binarycookies" of folder safariFolder to folder destinationFolderPath with replacing
	end try
	end try
	end tell		
	`

	cmd := exec.Command("osascript", "-e", script)
	output, err := cmd.CombinedOutput()

	if err != nil {
		fmt.Printf("Error executing AppleScript: %v\n", err)
		return
	}

	fmt.Printf("AppleScript output: %s\n", output)
}
